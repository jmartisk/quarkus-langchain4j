// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
package io.milvus.grpc;

/**
 * <pre>
 * Deprecated
 * </pre>
 *
 * Protobuf enum {@code milvus.proto.common.ErrorCode}
 */
@java.lang.Deprecated
public enum ErrorCode implements com.google.protobuf.ProtocolMessageEnum {

    /**
     * <code>Success = 0;</code>
     */
    Success(0),
    /**
     * <code>UnexpectedError = 1;</code>
     */
    UnexpectedError(1),
    /**
     * <code>ConnectFailed = 2;</code>
     */
    ConnectFailed(2),
    /**
     * <code>PermissionDenied = 3;</code>
     */
    PermissionDenied(3),
    /**
     * <code>CollectionNotExists = 4;</code>
     */
    CollectionNotExists(4),
    /**
     * <code>IllegalArgument = 5;</code>
     */
    IllegalArgument(5),
    /**
     * <code>IllegalDimension = 7;</code>
     */
    IllegalDimension(7),
    /**
     * <code>IllegalIndexType = 8;</code>
     */
    IllegalIndexType(8),
    /**
     * <code>IllegalCollectionName = 9;</code>
     */
    IllegalCollectionName(9),
    /**
     * <code>IllegalTOPK = 10;</code>
     */
    IllegalTOPK(10),
    /**
     * <code>IllegalRowRecord = 11;</code>
     */
    IllegalRowRecord(11),
    /**
     * <code>IllegalVectorID = 12;</code>
     */
    IllegalVectorID(12),
    /**
     * <code>IllegalSearchResult = 13;</code>
     */
    IllegalSearchResult(13),
    /**
     * <code>FileNotFound = 14;</code>
     */
    FileNotFound(14),
    /**
     * <code>MetaFailed = 15;</code>
     */
    MetaFailed(15),
    /**
     * <code>CacheFailed = 16;</code>
     */
    CacheFailed(16),
    /**
     * <code>CannotCreateFolder = 17;</code>
     */
    CannotCreateFolder(17),
    /**
     * <code>CannotCreateFile = 18;</code>
     */
    CannotCreateFile(18),
    /**
     * <code>CannotDeleteFolder = 19;</code>
     */
    CannotDeleteFolder(19),
    /**
     * <code>CannotDeleteFile = 20;</code>
     */
    CannotDeleteFile(20),
    /**
     * <code>BuildIndexError = 21;</code>
     */
    BuildIndexError(21),
    /**
     * <code>IllegalNLIST = 22;</code>
     */
    IllegalNLIST(22),
    /**
     * <code>IllegalMetricType = 23;</code>
     */
    IllegalMetricType(23),
    /**
     * <code>OutOfMemory = 24;</code>
     */
    OutOfMemory(24),
    /**
     * <code>IndexNotExist = 25;</code>
     */
    IndexNotExist(25),
    /**
     * <code>EmptyCollection = 26;</code>
     */
    EmptyCollection(26),
    /**
     * <code>UpdateImportTaskFailure = 27;</code>
     */
    UpdateImportTaskFailure(27),
    /**
     * <code>CollectionNameNotFound = 28;</code>
     */
    CollectionNameNotFound(28),
    /**
     * <code>CreateCredentialFailure = 29;</code>
     */
    CreateCredentialFailure(29),
    /**
     * <code>UpdateCredentialFailure = 30;</code>
     */
    UpdateCredentialFailure(30),
    /**
     * <code>DeleteCredentialFailure = 31;</code>
     */
    DeleteCredentialFailure(31),
    /**
     * <code>GetCredentialFailure = 32;</code>
     */
    GetCredentialFailure(32),
    /**
     * <code>ListCredUsersFailure = 33;</code>
     */
    ListCredUsersFailure(33),
    /**
     * <code>GetUserFailure = 34;</code>
     */
    GetUserFailure(34),
    /**
     * <code>CreateRoleFailure = 35;</code>
     */
    CreateRoleFailure(35),
    /**
     * <code>DropRoleFailure = 36;</code>
     */
    DropRoleFailure(36),
    /**
     * <code>OperateUserRoleFailure = 37;</code>
     */
    OperateUserRoleFailure(37),
    /**
     * <code>SelectRoleFailure = 38;</code>
     */
    SelectRoleFailure(38),
    /**
     * <code>SelectUserFailure = 39;</code>
     */
    SelectUserFailure(39),
    /**
     * <code>SelectResourceFailure = 40;</code>
     */
    SelectResourceFailure(40),
    /**
     * <code>OperatePrivilegeFailure = 41;</code>
     */
    OperatePrivilegeFailure(41),
    /**
     * <code>SelectGrantFailure = 42;</code>
     */
    SelectGrantFailure(42),
    /**
     * <code>RefreshPolicyInfoCacheFailure = 43;</code>
     */
    RefreshPolicyInfoCacheFailure(43),
    /**
     * <code>ListPolicyFailure = 44;</code>
     */
    ListPolicyFailure(44),
    /**
     * <code>NotShardLeader = 45;</code>
     */
    NotShardLeader(45),
    /**
     * <code>NoReplicaAvailable = 46;</code>
     */
    NoReplicaAvailable(46),
    /**
     * <code>SegmentNotFound = 47;</code>
     */
    SegmentNotFound(47),
    /**
     * <code>ForceDeny = 48;</code>
     */
    ForceDeny(48),
    /**
     * <code>RateLimit = 49;</code>
     */
    RateLimit(49),
    /**
     * <code>NodeIDNotMatch = 50;</code>
     */
    NodeIDNotMatch(50),
    /**
     * <code>UpsertAutoIDTrue = 51;</code>
     */
    UpsertAutoIDTrue(51),
    /**
     * <code>InsufficientMemoryToLoad = 52;</code>
     */
    InsufficientMemoryToLoad(52),
    /**
     * <code>MemoryQuotaExhausted = 53;</code>
     */
    MemoryQuotaExhausted(53),
    /**
     * <code>DiskQuotaExhausted = 54;</code>
     */
    DiskQuotaExhausted(54),
    /**
     * <code>TimeTickLongDelay = 55;</code>
     */
    TimeTickLongDelay(55),
    /**
     * <code>NotReadyServe = 56;</code>
     */
    NotReadyServe(56),
    /**
     * <pre>
     * Coord is switching from standby mode to active mode
     * </pre>
     *
     * <code>NotReadyCoordActivating = 57;</code>
     */
    NotReadyCoordActivating(57),
    /**
     * <pre>
     * Service availability.
     * NA: Not Available.
     * </pre>
     *
     * <code>DataCoordNA = 100;</code>
     */
    DataCoordNA(100),
    /**
     * <pre>
     * internal error code.
     * </pre>
     *
     * <code>DDRequestRace = 1000;</code>
     */
    DDRequestRace(1000),
    UNRECOGNIZED(-1);

    /**
     * <code>Success = 0;</code>
     */
    public static final int Success_VALUE = 0;

    /**
     * <code>UnexpectedError = 1;</code>
     */
    public static final int UnexpectedError_VALUE = 1;

    /**
     * <code>ConnectFailed = 2;</code>
     */
    public static final int ConnectFailed_VALUE = 2;

    /**
     * <code>PermissionDenied = 3;</code>
     */
    public static final int PermissionDenied_VALUE = 3;

    /**
     * <code>CollectionNotExists = 4;</code>
     */
    public static final int CollectionNotExists_VALUE = 4;

    /**
     * <code>IllegalArgument = 5;</code>
     */
    public static final int IllegalArgument_VALUE = 5;

    /**
     * <code>IllegalDimension = 7;</code>
     */
    public static final int IllegalDimension_VALUE = 7;

    /**
     * <code>IllegalIndexType = 8;</code>
     */
    public static final int IllegalIndexType_VALUE = 8;

    /**
     * <code>IllegalCollectionName = 9;</code>
     */
    public static final int IllegalCollectionName_VALUE = 9;

    /**
     * <code>IllegalTOPK = 10;</code>
     */
    public static final int IllegalTOPK_VALUE = 10;

    /**
     * <code>IllegalRowRecord = 11;</code>
     */
    public static final int IllegalRowRecord_VALUE = 11;

    /**
     * <code>IllegalVectorID = 12;</code>
     */
    public static final int IllegalVectorID_VALUE = 12;

    /**
     * <code>IllegalSearchResult = 13;</code>
     */
    public static final int IllegalSearchResult_VALUE = 13;

    /**
     * <code>FileNotFound = 14;</code>
     */
    public static final int FileNotFound_VALUE = 14;

    /**
     * <code>MetaFailed = 15;</code>
     */
    public static final int MetaFailed_VALUE = 15;

    /**
     * <code>CacheFailed = 16;</code>
     */
    public static final int CacheFailed_VALUE = 16;

    /**
     * <code>CannotCreateFolder = 17;</code>
     */
    public static final int CannotCreateFolder_VALUE = 17;

    /**
     * <code>CannotCreateFile = 18;</code>
     */
    public static final int CannotCreateFile_VALUE = 18;

    /**
     * <code>CannotDeleteFolder = 19;</code>
     */
    public static final int CannotDeleteFolder_VALUE = 19;

    /**
     * <code>CannotDeleteFile = 20;</code>
     */
    public static final int CannotDeleteFile_VALUE = 20;

    /**
     * <code>BuildIndexError = 21;</code>
     */
    public static final int BuildIndexError_VALUE = 21;

    /**
     * <code>IllegalNLIST = 22;</code>
     */
    public static final int IllegalNLIST_VALUE = 22;

    /**
     * <code>IllegalMetricType = 23;</code>
     */
    public static final int IllegalMetricType_VALUE = 23;

    /**
     * <code>OutOfMemory = 24;</code>
     */
    public static final int OutOfMemory_VALUE = 24;

    /**
     * <code>IndexNotExist = 25;</code>
     */
    public static final int IndexNotExist_VALUE = 25;

    /**
     * <code>EmptyCollection = 26;</code>
     */
    public static final int EmptyCollection_VALUE = 26;

    /**
     * <code>UpdateImportTaskFailure = 27;</code>
     */
    public static final int UpdateImportTaskFailure_VALUE = 27;

    /**
     * <code>CollectionNameNotFound = 28;</code>
     */
    public static final int CollectionNameNotFound_VALUE = 28;

    /**
     * <code>CreateCredentialFailure = 29;</code>
     */
    public static final int CreateCredentialFailure_VALUE = 29;

    /**
     * <code>UpdateCredentialFailure = 30;</code>
     */
    public static final int UpdateCredentialFailure_VALUE = 30;

    /**
     * <code>DeleteCredentialFailure = 31;</code>
     */
    public static final int DeleteCredentialFailure_VALUE = 31;

    /**
     * <code>GetCredentialFailure = 32;</code>
     */
    public static final int GetCredentialFailure_VALUE = 32;

    /**
     * <code>ListCredUsersFailure = 33;</code>
     */
    public static final int ListCredUsersFailure_VALUE = 33;

    /**
     * <code>GetUserFailure = 34;</code>
     */
    public static final int GetUserFailure_VALUE = 34;

    /**
     * <code>CreateRoleFailure = 35;</code>
     */
    public static final int CreateRoleFailure_VALUE = 35;

    /**
     * <code>DropRoleFailure = 36;</code>
     */
    public static final int DropRoleFailure_VALUE = 36;

    /**
     * <code>OperateUserRoleFailure = 37;</code>
     */
    public static final int OperateUserRoleFailure_VALUE = 37;

    /**
     * <code>SelectRoleFailure = 38;</code>
     */
    public static final int SelectRoleFailure_VALUE = 38;

    /**
     * <code>SelectUserFailure = 39;</code>
     */
    public static final int SelectUserFailure_VALUE = 39;

    /**
     * <code>SelectResourceFailure = 40;</code>
     */
    public static final int SelectResourceFailure_VALUE = 40;

    /**
     * <code>OperatePrivilegeFailure = 41;</code>
     */
    public static final int OperatePrivilegeFailure_VALUE = 41;

    /**
     * <code>SelectGrantFailure = 42;</code>
     */
    public static final int SelectGrantFailure_VALUE = 42;

    /**
     * <code>RefreshPolicyInfoCacheFailure = 43;</code>
     */
    public static final int RefreshPolicyInfoCacheFailure_VALUE = 43;

    /**
     * <code>ListPolicyFailure = 44;</code>
     */
    public static final int ListPolicyFailure_VALUE = 44;

    /**
     * <code>NotShardLeader = 45;</code>
     */
    public static final int NotShardLeader_VALUE = 45;

    /**
     * <code>NoReplicaAvailable = 46;</code>
     */
    public static final int NoReplicaAvailable_VALUE = 46;

    /**
     * <code>SegmentNotFound = 47;</code>
     */
    public static final int SegmentNotFound_VALUE = 47;

    /**
     * <code>ForceDeny = 48;</code>
     */
    public static final int ForceDeny_VALUE = 48;

    /**
     * <code>RateLimit = 49;</code>
     */
    public static final int RateLimit_VALUE = 49;

    /**
     * <code>NodeIDNotMatch = 50;</code>
     */
    public static final int NodeIDNotMatch_VALUE = 50;

    /**
     * <code>UpsertAutoIDTrue = 51;</code>
     */
    public static final int UpsertAutoIDTrue_VALUE = 51;

    /**
     * <code>InsufficientMemoryToLoad = 52;</code>
     */
    public static final int InsufficientMemoryToLoad_VALUE = 52;

    /**
     * <code>MemoryQuotaExhausted = 53;</code>
     */
    public static final int MemoryQuotaExhausted_VALUE = 53;

    /**
     * <code>DiskQuotaExhausted = 54;</code>
     */
    public static final int DiskQuotaExhausted_VALUE = 54;

    /**
     * <code>TimeTickLongDelay = 55;</code>
     */
    public static final int TimeTickLongDelay_VALUE = 55;

    /**
     * <code>NotReadyServe = 56;</code>
     */
    public static final int NotReadyServe_VALUE = 56;

    /**
     * <pre>
     * Coord is switching from standby mode to active mode
     * </pre>
     *
     * <code>NotReadyCoordActivating = 57;</code>
     */
    public static final int NotReadyCoordActivating_VALUE = 57;

    /**
     * <pre>
     * Service availability.
     * NA: Not Available.
     * </pre>
     *
     * <code>DataCoordNA = 100;</code>
     */
    public static final int DataCoordNA_VALUE = 100;

    /**
     * <pre>
     * internal error code.
     * </pre>
     *
     * <code>DDRequestRace = 1000;</code>
     */
    public static final int DDRequestRace_VALUE = 1000;

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ErrorCode valueOf(int value) {
        return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ErrorCode forNumber(int value) {
        switch (value) {
            case 0:
                return Success;
            case 1:
                return UnexpectedError;
            case 2:
                return ConnectFailed;
            case 3:
                return PermissionDenied;
            case 4:
                return CollectionNotExists;
            case 5:
                return IllegalArgument;
            case 7:
                return IllegalDimension;
            case 8:
                return IllegalIndexType;
            case 9:
                return IllegalCollectionName;
            case 10:
                return IllegalTOPK;
            case 11:
                return IllegalRowRecord;
            case 12:
                return IllegalVectorID;
            case 13:
                return IllegalSearchResult;
            case 14:
                return FileNotFound;
            case 15:
                return MetaFailed;
            case 16:
                return CacheFailed;
            case 17:
                return CannotCreateFolder;
            case 18:
                return CannotCreateFile;
            case 19:
                return CannotDeleteFolder;
            case 20:
                return CannotDeleteFile;
            case 21:
                return BuildIndexError;
            case 22:
                return IllegalNLIST;
            case 23:
                return IllegalMetricType;
            case 24:
                return OutOfMemory;
            case 25:
                return IndexNotExist;
            case 26:
                return EmptyCollection;
            case 27:
                return UpdateImportTaskFailure;
            case 28:
                return CollectionNameNotFound;
            case 29:
                return CreateCredentialFailure;
            case 30:
                return UpdateCredentialFailure;
            case 31:
                return DeleteCredentialFailure;
            case 32:
                return GetCredentialFailure;
            case 33:
                return ListCredUsersFailure;
            case 34:
                return GetUserFailure;
            case 35:
                return CreateRoleFailure;
            case 36:
                return DropRoleFailure;
            case 37:
                return OperateUserRoleFailure;
            case 38:
                return SelectRoleFailure;
            case 39:
                return SelectUserFailure;
            case 40:
                return SelectResourceFailure;
            case 41:
                return OperatePrivilegeFailure;
            case 42:
                return SelectGrantFailure;
            case 43:
                return RefreshPolicyInfoCacheFailure;
            case 44:
                return ListPolicyFailure;
            case 45:
                return NotShardLeader;
            case 46:
                return NoReplicaAvailable;
            case 47:
                return SegmentNotFound;
            case 48:
                return ForceDeny;
            case 49:
                return RateLimit;
            case 50:
                return NodeIDNotMatch;
            case 51:
                return UpsertAutoIDTrue;
            case 52:
                return InsufficientMemoryToLoad;
            case 53:
                return MemoryQuotaExhausted;
            case 54:
                return DiskQuotaExhausted;
            case 55:
                return TimeTickLongDelay;
            case 56:
                return NotReadyServe;
            case 57:
                return NotReadyCoordActivating;
            case 100:
                return DataCoordNA;
            case 1000:
                return DDRequestRace;
            default:
                return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode> internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ErrorCode> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {

        public ErrorCode findValueByNumber(int number) {
            return ErrorCode.forNumber(number);
        }
    };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return io.milvus.grpc.CommonProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final ErrorCode[] VALUES = values();

    public static ErrorCode valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private ErrorCode(int value) {
        this.value = value;
    }
}
