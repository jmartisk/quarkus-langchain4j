// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
package io.milvus.grpc;

/**
 * Protobuf enum {@code milvus.proto.common.MsgType}
 */
public enum MsgType implements com.google.protobuf.ProtocolMessageEnum {

    /**
     * <code>Undefined = 0;</code>
     */
    Undefined(0),
    /**
     * <pre>
     * DEFINITION REQUESTS: COLLECTION
     * </pre>
     *
     * <code>CreateCollection = 100;</code>
     */
    CreateCollection(100),
    /**
     * <code>DropCollection = 101;</code>
     */
    DropCollection(101),
    /**
     * <code>HasCollection = 102;</code>
     */
    HasCollection(102),
    /**
     * <code>DescribeCollection = 103;</code>
     */
    DescribeCollection(103),
    /**
     * <code>ShowCollections = 104;</code>
     */
    ShowCollections(104),
    /**
     * <code>GetSystemConfigs = 105;</code>
     */
    GetSystemConfigs(105),
    /**
     * <code>LoadCollection = 106;</code>
     */
    LoadCollection(106),
    /**
     * <code>ReleaseCollection = 107;</code>
     */
    ReleaseCollection(107),
    /**
     * <code>CreateAlias = 108;</code>
     */
    CreateAlias(108),
    /**
     * <code>DropAlias = 109;</code>
     */
    DropAlias(109),
    /**
     * <code>AlterAlias = 110;</code>
     */
    AlterAlias(110),
    /**
     * <code>AlterCollection = 111;</code>
     */
    AlterCollection(111),
    /**
     * <code>RenameCollection = 112;</code>
     */
    RenameCollection(112),
    /**
     * <code>DescribeAlias = 113;</code>
     */
    DescribeAlias(113),
    /**
     * <code>ListAliases = 114;</code>
     */
    ListAliases(114),
    /**
     * <pre>
     * DEFINITION REQUESTS: PARTITION
     * </pre>
     *
     * <code>CreatePartition = 200;</code>
     */
    CreatePartition(200),
    /**
     * <code>DropPartition = 201;</code>
     */
    DropPartition(201),
    /**
     * <code>HasPartition = 202;</code>
     */
    HasPartition(202),
    /**
     * <code>DescribePartition = 203;</code>
     */
    DescribePartition(203),
    /**
     * <code>ShowPartitions = 204;</code>
     */
    ShowPartitions(204),
    /**
     * <code>LoadPartitions = 205;</code>
     */
    LoadPartitions(205),
    /**
     * <code>ReleasePartitions = 206;</code>
     */
    ReleasePartitions(206),
    /**
     * <pre>
     * DEFINE REQUESTS: SEGMENT
     * </pre>
     *
     * <code>ShowSegments = 250;</code>
     */
    ShowSegments(250),
    /**
     * <code>DescribeSegment = 251;</code>
     */
    DescribeSegment(251),
    /**
     * <code>LoadSegments = 252;</code>
     */
    LoadSegments(252),
    /**
     * <code>ReleaseSegments = 253;</code>
     */
    ReleaseSegments(253),
    /**
     * <code>HandoffSegments = 254;</code>
     */
    HandoffSegments(254),
    /**
     * <code>LoadBalanceSegments = 255;</code>
     */
    LoadBalanceSegments(255),
    /**
     * <code>DescribeSegments = 256;</code>
     */
    DescribeSegments(256),
    /**
     * <code>FederListIndexedSegment = 257;</code>
     */
    FederListIndexedSegment(257),
    /**
     * <code>FederDescribeSegmentIndexData = 258;</code>
     */
    FederDescribeSegmentIndexData(258),
    /**
     * <pre>
     * DEFINITION REQUESTS: INDEX
     * </pre>
     *
     * <code>CreateIndex = 300;</code>
     */
    CreateIndex(300),
    /**
     * <code>DescribeIndex = 301;</code>
     */
    DescribeIndex(301),
    /**
     * <code>DropIndex = 302;</code>
     */
    DropIndex(302),
    /**
     * <code>GetIndexStatistics = 303;</code>
     */
    GetIndexStatistics(303),
    /**
     * <pre>
     * MANIPULATION REQUESTS
     * </pre>
     *
     * <code>Insert = 400;</code>
     */
    Insert(400),
    /**
     * <code>Delete = 401;</code>
     */
    Delete(401),
    /**
     * <code>Flush = 402;</code>
     */
    Flush(402),
    /**
     * <code>ResendSegmentStats = 403;</code>
     */
    ResendSegmentStats(403),
    /**
     * <code>Upsert = 404;</code>
     */
    Upsert(404),
    /**
     * <pre>
     * QUERY
     * </pre>
     *
     * <code>Search = 500;</code>
     */
    Search(500),
    /**
     * <code>SearchResult = 501;</code>
     */
    SearchResult(501),
    /**
     * <code>GetIndexState = 502;</code>
     */
    GetIndexState(502),
    /**
     * <code>GetIndexBuildProgress = 503;</code>
     */
    GetIndexBuildProgress(503),
    /**
     * <code>GetCollectionStatistics = 504;</code>
     */
    GetCollectionStatistics(504),
    /**
     * <code>GetPartitionStatistics = 505;</code>
     */
    GetPartitionStatistics(505),
    /**
     * <code>Retrieve = 506;</code>
     */
    Retrieve(506),
    /**
     * <code>RetrieveResult = 507;</code>
     */
    RetrieveResult(507),
    /**
     * <code>WatchDmChannels = 508;</code>
     */
    WatchDmChannels(508),
    /**
     * <code>RemoveDmChannels = 509;</code>
     */
    RemoveDmChannels(509),
    /**
     * <code>WatchQueryChannels = 510;</code>
     */
    WatchQueryChannels(510),
    /**
     * <code>RemoveQueryChannels = 511;</code>
     */
    RemoveQueryChannels(511),
    /**
     * <code>SealedSegmentsChangeInfo = 512;</code>
     */
    SealedSegmentsChangeInfo(512),
    /**
     * <code>WatchDeltaChannels = 513;</code>
     */
    WatchDeltaChannels(513),
    /**
     * <code>GetShardLeaders = 514;</code>
     */
    GetShardLeaders(514),
    /**
     * <code>GetReplicas = 515;</code>
     */
    GetReplicas(515),
    /**
     * <code>UnsubDmChannel = 516;</code>
     */
    UnsubDmChannel(516),
    /**
     * <code>GetDistribution = 517;</code>
     */
    GetDistribution(517),
    /**
     * <code>SyncDistribution = 518;</code>
     */
    SyncDistribution(518),
    /**
     * <pre>
     * DATA SERVICE
     * </pre>
     *
     * <code>SegmentInfo = 600;</code>
     */
    SegmentInfo(600),
    /**
     * <code>SystemInfo = 601;</code>
     */
    SystemInfo(601),
    /**
     * <code>GetRecoveryInfo = 602;</code>
     */
    GetRecoveryInfo(602),
    /**
     * <code>GetSegmentState = 603;</code>
     */
    GetSegmentState(603),
    /**
     * <pre>
     * SYSTEM CONTROL
     * </pre>
     *
     * <code>TimeTick = 1200;</code>
     */
    TimeTick(1200),
    /**
     * <pre>
     * GOOSE TODO: Remove kQueryNodeStats
     * </pre>
     *
     * <code>QueryNodeStats = 1201;</code>
     */
    QueryNodeStats(1201),
    /**
     * <code>LoadIndex = 1202;</code>
     */
    LoadIndex(1202),
    /**
     * <code>RequestID = 1203;</code>
     */
    RequestID(1203),
    /**
     * <code>RequestTSO = 1204;</code>
     */
    RequestTSO(1204),
    /**
     * <code>AllocateSegment = 1205;</code>
     */
    AllocateSegment(1205),
    /**
     * <code>SegmentStatistics = 1206;</code>
     */
    SegmentStatistics(1206),
    /**
     * <code>SegmentFlushDone = 1207;</code>
     */
    SegmentFlushDone(1207),
    /**
     * <code>DataNodeTt = 1208;</code>
     */
    DataNodeTt(1208),
    /**
     * <code>Connect = 1209;</code>
     */
    Connect(1209),
    /**
     * <code>ListClientInfos = 1210;</code>
     */
    ListClientInfos(1210),
    /**
     * <code>AllocTimestamp = 1211;</code>
     */
    AllocTimestamp(1211),
    /**
     * <pre>
     * Credential
     * </pre>
     *
     * <code>CreateCredential = 1500;</code>
     */
    CreateCredential(1500),
    /**
     * <code>GetCredential = 1501;</code>
     */
    GetCredential(1501),
    /**
     * <code>DeleteCredential = 1502;</code>
     */
    DeleteCredential(1502),
    /**
     * <code>UpdateCredential = 1503;</code>
     */
    UpdateCredential(1503),
    /**
     * <code>ListCredUsernames = 1504;</code>
     */
    ListCredUsernames(1504),
    /**
     * <pre>
     * RBAC
     * </pre>
     *
     * <code>CreateRole = 1600;</code>
     */
    CreateRole(1600),
    /**
     * <code>DropRole = 1601;</code>
     */
    DropRole(1601),
    /**
     * <code>OperateUserRole = 1602;</code>
     */
    OperateUserRole(1602),
    /**
     * <code>SelectRole = 1603;</code>
     */
    SelectRole(1603),
    /**
     * <code>SelectUser = 1604;</code>
     */
    SelectUser(1604),
    /**
     * <code>SelectResource = 1605;</code>
     */
    SelectResource(1605),
    /**
     * <code>OperatePrivilege = 1606;</code>
     */
    OperatePrivilege(1606),
    /**
     * <code>SelectGrant = 1607;</code>
     */
    SelectGrant(1607),
    /**
     * <code>RefreshPolicyInfoCache = 1608;</code>
     */
    RefreshPolicyInfoCache(1608),
    /**
     * <code>ListPolicy = 1609;</code>
     */
    ListPolicy(1609),
    /**
     * <pre>
     * Resource group
     * </pre>
     *
     * <code>CreateResourceGroup = 1700;</code>
     */
    CreateResourceGroup(1700),
    /**
     * <code>DropResourceGroup = 1701;</code>
     */
    DropResourceGroup(1701),
    /**
     * <code>ListResourceGroups = 1702;</code>
     */
    ListResourceGroups(1702),
    /**
     * <code>DescribeResourceGroup = 1703;</code>
     */
    DescribeResourceGroup(1703),
    /**
     * <code>TransferNode = 1704;</code>
     */
    TransferNode(1704),
    /**
     * <code>TransferReplica = 1705;</code>
     */
    TransferReplica(1705),
    /**
     * <pre>
     * Database group
     * </pre>
     *
     * <code>CreateDatabase = 1801;</code>
     */
    CreateDatabase(1801),
    /**
     * <code>DropDatabase = 1802;</code>
     */
    DropDatabase(1802),
    /**
     * <code>ListDatabases = 1803;</code>
     */
    ListDatabases(1803),
    UNRECOGNIZED(-1);

    /**
     * <code>Undefined = 0;</code>
     */
    public static final int Undefined_VALUE = 0;

    /**
     * <pre>
     * DEFINITION REQUESTS: COLLECTION
     * </pre>
     *
     * <code>CreateCollection = 100;</code>
     */
    public static final int CreateCollection_VALUE = 100;

    /**
     * <code>DropCollection = 101;</code>
     */
    public static final int DropCollection_VALUE = 101;

    /**
     * <code>HasCollection = 102;</code>
     */
    public static final int HasCollection_VALUE = 102;

    /**
     * <code>DescribeCollection = 103;</code>
     */
    public static final int DescribeCollection_VALUE = 103;

    /**
     * <code>ShowCollections = 104;</code>
     */
    public static final int ShowCollections_VALUE = 104;

    /**
     * <code>GetSystemConfigs = 105;</code>
     */
    public static final int GetSystemConfigs_VALUE = 105;

    /**
     * <code>LoadCollection = 106;</code>
     */
    public static final int LoadCollection_VALUE = 106;

    /**
     * <code>ReleaseCollection = 107;</code>
     */
    public static final int ReleaseCollection_VALUE = 107;

    /**
     * <code>CreateAlias = 108;</code>
     */
    public static final int CreateAlias_VALUE = 108;

    /**
     * <code>DropAlias = 109;</code>
     */
    public static final int DropAlias_VALUE = 109;

    /**
     * <code>AlterAlias = 110;</code>
     */
    public static final int AlterAlias_VALUE = 110;

    /**
     * <code>AlterCollection = 111;</code>
     */
    public static final int AlterCollection_VALUE = 111;

    /**
     * <code>RenameCollection = 112;</code>
     */
    public static final int RenameCollection_VALUE = 112;

    /**
     * <code>DescribeAlias = 113;</code>
     */
    public static final int DescribeAlias_VALUE = 113;

    /**
     * <code>ListAliases = 114;</code>
     */
    public static final int ListAliases_VALUE = 114;

    /**
     * <pre>
     * DEFINITION REQUESTS: PARTITION
     * </pre>
     *
     * <code>CreatePartition = 200;</code>
     */
    public static final int CreatePartition_VALUE = 200;

    /**
     * <code>DropPartition = 201;</code>
     */
    public static final int DropPartition_VALUE = 201;

    /**
     * <code>HasPartition = 202;</code>
     */
    public static final int HasPartition_VALUE = 202;

    /**
     * <code>DescribePartition = 203;</code>
     */
    public static final int DescribePartition_VALUE = 203;

    /**
     * <code>ShowPartitions = 204;</code>
     */
    public static final int ShowPartitions_VALUE = 204;

    /**
     * <code>LoadPartitions = 205;</code>
     */
    public static final int LoadPartitions_VALUE = 205;

    /**
     * <code>ReleasePartitions = 206;</code>
     */
    public static final int ReleasePartitions_VALUE = 206;

    /**
     * <pre>
     * DEFINE REQUESTS: SEGMENT
     * </pre>
     *
     * <code>ShowSegments = 250;</code>
     */
    public static final int ShowSegments_VALUE = 250;

    /**
     * <code>DescribeSegment = 251;</code>
     */
    public static final int DescribeSegment_VALUE = 251;

    /**
     * <code>LoadSegments = 252;</code>
     */
    public static final int LoadSegments_VALUE = 252;

    /**
     * <code>ReleaseSegments = 253;</code>
     */
    public static final int ReleaseSegments_VALUE = 253;

    /**
     * <code>HandoffSegments = 254;</code>
     */
    public static final int HandoffSegments_VALUE = 254;

    /**
     * <code>LoadBalanceSegments = 255;</code>
     */
    public static final int LoadBalanceSegments_VALUE = 255;

    /**
     * <code>DescribeSegments = 256;</code>
     */
    public static final int DescribeSegments_VALUE = 256;

    /**
     * <code>FederListIndexedSegment = 257;</code>
     */
    public static final int FederListIndexedSegment_VALUE = 257;

    /**
     * <code>FederDescribeSegmentIndexData = 258;</code>
     */
    public static final int FederDescribeSegmentIndexData_VALUE = 258;

    /**
     * <pre>
     * DEFINITION REQUESTS: INDEX
     * </pre>
     *
     * <code>CreateIndex = 300;</code>
     */
    public static final int CreateIndex_VALUE = 300;

    /**
     * <code>DescribeIndex = 301;</code>
     */
    public static final int DescribeIndex_VALUE = 301;

    /**
     * <code>DropIndex = 302;</code>
     */
    public static final int DropIndex_VALUE = 302;

    /**
     * <code>GetIndexStatistics = 303;</code>
     */
    public static final int GetIndexStatistics_VALUE = 303;

    /**
     * <pre>
     * MANIPULATION REQUESTS
     * </pre>
     *
     * <code>Insert = 400;</code>
     */
    public static final int Insert_VALUE = 400;

    /**
     * <code>Delete = 401;</code>
     */
    public static final int Delete_VALUE = 401;

    /**
     * <code>Flush = 402;</code>
     */
    public static final int Flush_VALUE = 402;

    /**
     * <code>ResendSegmentStats = 403;</code>
     */
    public static final int ResendSegmentStats_VALUE = 403;

    /**
     * <code>Upsert = 404;</code>
     */
    public static final int Upsert_VALUE = 404;

    /**
     * <pre>
     * QUERY
     * </pre>
     *
     * <code>Search = 500;</code>
     */
    public static final int Search_VALUE = 500;

    /**
     * <code>SearchResult = 501;</code>
     */
    public static final int SearchResult_VALUE = 501;

    /**
     * <code>GetIndexState = 502;</code>
     */
    public static final int GetIndexState_VALUE = 502;

    /**
     * <code>GetIndexBuildProgress = 503;</code>
     */
    public static final int GetIndexBuildProgress_VALUE = 503;

    /**
     * <code>GetCollectionStatistics = 504;</code>
     */
    public static final int GetCollectionStatistics_VALUE = 504;

    /**
     * <code>GetPartitionStatistics = 505;</code>
     */
    public static final int GetPartitionStatistics_VALUE = 505;

    /**
     * <code>Retrieve = 506;</code>
     */
    public static final int Retrieve_VALUE = 506;

    /**
     * <code>RetrieveResult = 507;</code>
     */
    public static final int RetrieveResult_VALUE = 507;

    /**
     * <code>WatchDmChannels = 508;</code>
     */
    public static final int WatchDmChannels_VALUE = 508;

    /**
     * <code>RemoveDmChannels = 509;</code>
     */
    public static final int RemoveDmChannels_VALUE = 509;

    /**
     * <code>WatchQueryChannels = 510;</code>
     */
    public static final int WatchQueryChannels_VALUE = 510;

    /**
     * <code>RemoveQueryChannels = 511;</code>
     */
    public static final int RemoveQueryChannels_VALUE = 511;

    /**
     * <code>SealedSegmentsChangeInfo = 512;</code>
     */
    public static final int SealedSegmentsChangeInfo_VALUE = 512;

    /**
     * <code>WatchDeltaChannels = 513;</code>
     */
    public static final int WatchDeltaChannels_VALUE = 513;

    /**
     * <code>GetShardLeaders = 514;</code>
     */
    public static final int GetShardLeaders_VALUE = 514;

    /**
     * <code>GetReplicas = 515;</code>
     */
    public static final int GetReplicas_VALUE = 515;

    /**
     * <code>UnsubDmChannel = 516;</code>
     */
    public static final int UnsubDmChannel_VALUE = 516;

    /**
     * <code>GetDistribution = 517;</code>
     */
    public static final int GetDistribution_VALUE = 517;

    /**
     * <code>SyncDistribution = 518;</code>
     */
    public static final int SyncDistribution_VALUE = 518;

    /**
     * <pre>
     * DATA SERVICE
     * </pre>
     *
     * <code>SegmentInfo = 600;</code>
     */
    public static final int SegmentInfo_VALUE = 600;

    /**
     * <code>SystemInfo = 601;</code>
     */
    public static final int SystemInfo_VALUE = 601;

    /**
     * <code>GetRecoveryInfo = 602;</code>
     */
    public static final int GetRecoveryInfo_VALUE = 602;

    /**
     * <code>GetSegmentState = 603;</code>
     */
    public static final int GetSegmentState_VALUE = 603;

    /**
     * <pre>
     * SYSTEM CONTROL
     * </pre>
     *
     * <code>TimeTick = 1200;</code>
     */
    public static final int TimeTick_VALUE = 1200;

    /**
     * <pre>
     * GOOSE TODO: Remove kQueryNodeStats
     * </pre>
     *
     * <code>QueryNodeStats = 1201;</code>
     */
    public static final int QueryNodeStats_VALUE = 1201;

    /**
     * <code>LoadIndex = 1202;</code>
     */
    public static final int LoadIndex_VALUE = 1202;

    /**
     * <code>RequestID = 1203;</code>
     */
    public static final int RequestID_VALUE = 1203;

    /**
     * <code>RequestTSO = 1204;</code>
     */
    public static final int RequestTSO_VALUE = 1204;

    /**
     * <code>AllocateSegment = 1205;</code>
     */
    public static final int AllocateSegment_VALUE = 1205;

    /**
     * <code>SegmentStatistics = 1206;</code>
     */
    public static final int SegmentStatistics_VALUE = 1206;

    /**
     * <code>SegmentFlushDone = 1207;</code>
     */
    public static final int SegmentFlushDone_VALUE = 1207;

    /**
     * <code>DataNodeTt = 1208;</code>
     */
    public static final int DataNodeTt_VALUE = 1208;

    /**
     * <code>Connect = 1209;</code>
     */
    public static final int Connect_VALUE = 1209;

    /**
     * <code>ListClientInfos = 1210;</code>
     */
    public static final int ListClientInfos_VALUE = 1210;

    /**
     * <code>AllocTimestamp = 1211;</code>
     */
    public static final int AllocTimestamp_VALUE = 1211;

    /**
     * <pre>
     * Credential
     * </pre>
     *
     * <code>CreateCredential = 1500;</code>
     */
    public static final int CreateCredential_VALUE = 1500;

    /**
     * <code>GetCredential = 1501;</code>
     */
    public static final int GetCredential_VALUE = 1501;

    /**
     * <code>DeleteCredential = 1502;</code>
     */
    public static final int DeleteCredential_VALUE = 1502;

    /**
     * <code>UpdateCredential = 1503;</code>
     */
    public static final int UpdateCredential_VALUE = 1503;

    /**
     * <code>ListCredUsernames = 1504;</code>
     */
    public static final int ListCredUsernames_VALUE = 1504;

    /**
     * <pre>
     * RBAC
     * </pre>
     *
     * <code>CreateRole = 1600;</code>
     */
    public static final int CreateRole_VALUE = 1600;

    /**
     * <code>DropRole = 1601;</code>
     */
    public static final int DropRole_VALUE = 1601;

    /**
     * <code>OperateUserRole = 1602;</code>
     */
    public static final int OperateUserRole_VALUE = 1602;

    /**
     * <code>SelectRole = 1603;</code>
     */
    public static final int SelectRole_VALUE = 1603;

    /**
     * <code>SelectUser = 1604;</code>
     */
    public static final int SelectUser_VALUE = 1604;

    /**
     * <code>SelectResource = 1605;</code>
     */
    public static final int SelectResource_VALUE = 1605;

    /**
     * <code>OperatePrivilege = 1606;</code>
     */
    public static final int OperatePrivilege_VALUE = 1606;

    /**
     * <code>SelectGrant = 1607;</code>
     */
    public static final int SelectGrant_VALUE = 1607;

    /**
     * <code>RefreshPolicyInfoCache = 1608;</code>
     */
    public static final int RefreshPolicyInfoCache_VALUE = 1608;

    /**
     * <code>ListPolicy = 1609;</code>
     */
    public static final int ListPolicy_VALUE = 1609;

    /**
     * <pre>
     * Resource group
     * </pre>
     *
     * <code>CreateResourceGroup = 1700;</code>
     */
    public static final int CreateResourceGroup_VALUE = 1700;

    /**
     * <code>DropResourceGroup = 1701;</code>
     */
    public static final int DropResourceGroup_VALUE = 1701;

    /**
     * <code>ListResourceGroups = 1702;</code>
     */
    public static final int ListResourceGroups_VALUE = 1702;

    /**
     * <code>DescribeResourceGroup = 1703;</code>
     */
    public static final int DescribeResourceGroup_VALUE = 1703;

    /**
     * <code>TransferNode = 1704;</code>
     */
    public static final int TransferNode_VALUE = 1704;

    /**
     * <code>TransferReplica = 1705;</code>
     */
    public static final int TransferReplica_VALUE = 1705;

    /**
     * <pre>
     * Database group
     * </pre>
     *
     * <code>CreateDatabase = 1801;</code>
     */
    public static final int CreateDatabase_VALUE = 1801;

    /**
     * <code>DropDatabase = 1802;</code>
     */
    public static final int DropDatabase_VALUE = 1802;

    /**
     * <code>ListDatabases = 1803;</code>
     */
    public static final int ListDatabases_VALUE = 1803;

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MsgType valueOf(int value) {
        return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MsgType forNumber(int value) {
        switch (value) {
            case 0:
                return Undefined;
            case 100:
                return CreateCollection;
            case 101:
                return DropCollection;
            case 102:
                return HasCollection;
            case 103:
                return DescribeCollection;
            case 104:
                return ShowCollections;
            case 105:
                return GetSystemConfigs;
            case 106:
                return LoadCollection;
            case 107:
                return ReleaseCollection;
            case 108:
                return CreateAlias;
            case 109:
                return DropAlias;
            case 110:
                return AlterAlias;
            case 111:
                return AlterCollection;
            case 112:
                return RenameCollection;
            case 113:
                return DescribeAlias;
            case 114:
                return ListAliases;
            case 200:
                return CreatePartition;
            case 201:
                return DropPartition;
            case 202:
                return HasPartition;
            case 203:
                return DescribePartition;
            case 204:
                return ShowPartitions;
            case 205:
                return LoadPartitions;
            case 206:
                return ReleasePartitions;
            case 250:
                return ShowSegments;
            case 251:
                return DescribeSegment;
            case 252:
                return LoadSegments;
            case 253:
                return ReleaseSegments;
            case 254:
                return HandoffSegments;
            case 255:
                return LoadBalanceSegments;
            case 256:
                return DescribeSegments;
            case 257:
                return FederListIndexedSegment;
            case 258:
                return FederDescribeSegmentIndexData;
            case 300:
                return CreateIndex;
            case 301:
                return DescribeIndex;
            case 302:
                return DropIndex;
            case 303:
                return GetIndexStatistics;
            case 400:
                return Insert;
            case 401:
                return Delete;
            case 402:
                return Flush;
            case 403:
                return ResendSegmentStats;
            case 404:
                return Upsert;
            case 500:
                return Search;
            case 501:
                return SearchResult;
            case 502:
                return GetIndexState;
            case 503:
                return GetIndexBuildProgress;
            case 504:
                return GetCollectionStatistics;
            case 505:
                return GetPartitionStatistics;
            case 506:
                return Retrieve;
            case 507:
                return RetrieveResult;
            case 508:
                return WatchDmChannels;
            case 509:
                return RemoveDmChannels;
            case 510:
                return WatchQueryChannels;
            case 511:
                return RemoveQueryChannels;
            case 512:
                return SealedSegmentsChangeInfo;
            case 513:
                return WatchDeltaChannels;
            case 514:
                return GetShardLeaders;
            case 515:
                return GetReplicas;
            case 516:
                return UnsubDmChannel;
            case 517:
                return GetDistribution;
            case 518:
                return SyncDistribution;
            case 600:
                return SegmentInfo;
            case 601:
                return SystemInfo;
            case 602:
                return GetRecoveryInfo;
            case 603:
                return GetSegmentState;
            case 1200:
                return TimeTick;
            case 1201:
                return QueryNodeStats;
            case 1202:
                return LoadIndex;
            case 1203:
                return RequestID;
            case 1204:
                return RequestTSO;
            case 1205:
                return AllocateSegment;
            case 1206:
                return SegmentStatistics;
            case 1207:
                return SegmentFlushDone;
            case 1208:
                return DataNodeTt;
            case 1209:
                return Connect;
            case 1210:
                return ListClientInfos;
            case 1211:
                return AllocTimestamp;
            case 1500:
                return CreateCredential;
            case 1501:
                return GetCredential;
            case 1502:
                return DeleteCredential;
            case 1503:
                return UpdateCredential;
            case 1504:
                return ListCredUsernames;
            case 1600:
                return CreateRole;
            case 1601:
                return DropRole;
            case 1602:
                return OperateUserRole;
            case 1603:
                return SelectRole;
            case 1604:
                return SelectUser;
            case 1605:
                return SelectResource;
            case 1606:
                return OperatePrivilege;
            case 1607:
                return SelectGrant;
            case 1608:
                return RefreshPolicyInfoCache;
            case 1609:
                return ListPolicy;
            case 1700:
                return CreateResourceGroup;
            case 1701:
                return DropResourceGroup;
            case 1702:
                return ListResourceGroups;
            case 1703:
                return DescribeResourceGroup;
            case 1704:
                return TransferNode;
            case 1705:
                return TransferReplica;
            case 1801:
                return CreateDatabase;
            case 1802:
                return DropDatabase;
            case 1803:
                return ListDatabases;
            default:
                return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType> internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<MsgType> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {

        public MsgType findValueByNumber(int number) {
            return MsgType.forNumber(number);
        }
    };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return io.milvus.grpc.CommonProto.getDescriptor().getEnumTypes().get(4);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private MsgType(int value) {
        this.value = value;
    }
}
