// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto
package io.milvus.grpc;

/**
 * <pre>
 * *
 *  &#64;brief Field data type
 * </pre>
 *
 * Protobuf enum {@code milvus.proto.schema.DataType}
 */
public enum DataType implements com.google.protobuf.ProtocolMessageEnum {

    /**
     * <code>None = 0;</code>
     */
    None(0),
    /**
     * <code>Bool = 1;</code>
     */
    Bool(1),
    /**
     * <code>Int8 = 2;</code>
     */
    Int8(2),
    /**
     * <code>Int16 = 3;</code>
     */
    Int16(3),
    /**
     * <code>Int32 = 4;</code>
     */
    Int32(4),
    /**
     * <code>Int64 = 5;</code>
     */
    Int64(5),
    /**
     * <code>Float = 10;</code>
     */
    Float(10),
    /**
     * <code>Double = 11;</code>
     */
    Double(11),
    /**
     * <code>String = 20;</code>
     */
    String(20),
    /**
     * <pre>
     * variable-length strings with a specified maximum length
     * </pre>
     *
     * <code>VarChar = 21;</code>
     */
    VarChar(21),
    /**
     * <code>Array = 22;</code>
     */
    Array(22),
    /**
     * <code>JSON = 23;</code>
     */
    JSON(23),
    /**
     * <code>BinaryVector = 100;</code>
     */
    BinaryVector(100),
    /**
     * <code>FloatVector = 101;</code>
     */
    FloatVector(101),
    /**
     * <code>Float16Vector = 102;</code>
     */
    Float16Vector(102),
    /**
     * <code>BFloat16Vector = 103;</code>
     */
    BFloat16Vector(103),
    UNRECOGNIZED(-1);

    /**
     * <code>None = 0;</code>
     */
    public static final int None_VALUE = 0;

    /**
     * <code>Bool = 1;</code>
     */
    public static final int Bool_VALUE = 1;

    /**
     * <code>Int8 = 2;</code>
     */
    public static final int Int8_VALUE = 2;

    /**
     * <code>Int16 = 3;</code>
     */
    public static final int Int16_VALUE = 3;

    /**
     * <code>Int32 = 4;</code>
     */
    public static final int Int32_VALUE = 4;

    /**
     * <code>Int64 = 5;</code>
     */
    public static final int Int64_VALUE = 5;

    /**
     * <code>Float = 10;</code>
     */
    public static final int Float_VALUE = 10;

    /**
     * <code>Double = 11;</code>
     */
    public static final int Double_VALUE = 11;

    /**
     * <code>String = 20;</code>
     */
    public static final int String_VALUE = 20;

    /**
     * <pre>
     * variable-length strings with a specified maximum length
     * </pre>
     *
     * <code>VarChar = 21;</code>
     */
    public static final int VarChar_VALUE = 21;

    /**
     * <code>Array = 22;</code>
     */
    public static final int Array_VALUE = 22;

    /**
     * <code>JSON = 23;</code>
     */
    public static final int JSON_VALUE = 23;

    /**
     * <code>BinaryVector = 100;</code>
     */
    public static final int BinaryVector_VALUE = 100;

    /**
     * <code>FloatVector = 101;</code>
     */
    public static final int FloatVector_VALUE = 101;

    /**
     * <code>Float16Vector = 102;</code>
     */
    public static final int Float16Vector_VALUE = 102;

    /**
     * <code>BFloat16Vector = 103;</code>
     */
    public static final int BFloat16Vector_VALUE = 103;

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataType valueOf(int value) {
        return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DataType forNumber(int value) {
        switch (value) {
            case 0:
                return None;
            case 1:
                return Bool;
            case 2:
                return Int8;
            case 3:
                return Int16;
            case 4:
                return Int32;
            case 5:
                return Int64;
            case 10:
                return Float;
            case 11:
                return Double;
            case 20:
                return String;
            case 21:
                return VarChar;
            case 22:
                return Array;
            case 23:
                return JSON;
            case 100:
                return BinaryVector;
            case 101:
                return FloatVector;
            case 102:
                return Float16Vector;
            case 103:
                return BFloat16Vector;
            default:
                return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataType> internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<DataType> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<DataType>() {

        public DataType findValueByNumber(int number) {
            return DataType.forNumber(number);
        }
    };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return io.milvus.grpc.SchemaProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final DataType[] VALUES = values();

    public static DataType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataType(int value) {
        this.value = value;
    }
}
