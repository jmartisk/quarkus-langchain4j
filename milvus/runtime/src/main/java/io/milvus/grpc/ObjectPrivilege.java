// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
package io.milvus.grpc;

/**
 * Protobuf enum {@code milvus.proto.common.ObjectPrivilege}
 */
public enum ObjectPrivilege implements com.google.protobuf.ProtocolMessageEnum {

    /**
     * <code>PrivilegeAll = 0;</code>
     */
    PrivilegeAll(0),
    /**
     * <code>PrivilegeCreateCollection = 1;</code>
     */
    PrivilegeCreateCollection(1),
    /**
     * <code>PrivilegeDropCollection = 2;</code>
     */
    PrivilegeDropCollection(2),
    /**
     * <code>PrivilegeDescribeCollection = 3;</code>
     */
    PrivilegeDescribeCollection(3),
    /**
     * <code>PrivilegeShowCollections = 4;</code>
     */
    PrivilegeShowCollections(4),
    /**
     * <code>PrivilegeLoad = 5;</code>
     */
    PrivilegeLoad(5),
    /**
     * <code>PrivilegeRelease = 6;</code>
     */
    PrivilegeRelease(6),
    /**
     * <code>PrivilegeCompaction = 7;</code>
     */
    PrivilegeCompaction(7),
    /**
     * <code>PrivilegeInsert = 8;</code>
     */
    PrivilegeInsert(8),
    /**
     * <code>PrivilegeDelete = 9;</code>
     */
    PrivilegeDelete(9),
    /**
     * <code>PrivilegeGetStatistics = 10;</code>
     */
    PrivilegeGetStatistics(10),
    /**
     * <code>PrivilegeCreateIndex = 11;</code>
     */
    PrivilegeCreateIndex(11),
    /**
     * <code>PrivilegeIndexDetail = 12;</code>
     */
    PrivilegeIndexDetail(12),
    /**
     * <code>PrivilegeDropIndex = 13;</code>
     */
    PrivilegeDropIndex(13),
    /**
     * <code>PrivilegeSearch = 14;</code>
     */
    PrivilegeSearch(14),
    /**
     * <code>PrivilegeFlush = 15;</code>
     */
    PrivilegeFlush(15),
    /**
     * <code>PrivilegeQuery = 16;</code>
     */
    PrivilegeQuery(16),
    /**
     * <code>PrivilegeLoadBalance = 17;</code>
     */
    PrivilegeLoadBalance(17),
    /**
     * <code>PrivilegeImport = 18;</code>
     */
    PrivilegeImport(18),
    /**
     * <code>PrivilegeCreateOwnership = 19;</code>
     */
    PrivilegeCreateOwnership(19),
    /**
     * <code>PrivilegeUpdateUser = 20;</code>
     */
    PrivilegeUpdateUser(20),
    /**
     * <code>PrivilegeDropOwnership = 21;</code>
     */
    PrivilegeDropOwnership(21),
    /**
     * <code>PrivilegeSelectOwnership = 22;</code>
     */
    PrivilegeSelectOwnership(22),
    /**
     * <code>PrivilegeManageOwnership = 23;</code>
     */
    PrivilegeManageOwnership(23),
    /**
     * <code>PrivilegeSelectUser = 24;</code>
     */
    PrivilegeSelectUser(24),
    /**
     * <code>PrivilegeUpsert = 25;</code>
     */
    PrivilegeUpsert(25),
    /**
     * <code>PrivilegeCreateResourceGroup = 26;</code>
     */
    PrivilegeCreateResourceGroup(26),
    /**
     * <code>PrivilegeDropResourceGroup = 27;</code>
     */
    PrivilegeDropResourceGroup(27),
    /**
     * <code>PrivilegeDescribeResourceGroup = 28;</code>
     */
    PrivilegeDescribeResourceGroup(28),
    /**
     * <code>PrivilegeListResourceGroups = 29;</code>
     */
    PrivilegeListResourceGroups(29),
    /**
     * <code>PrivilegeTransferNode = 30;</code>
     */
    PrivilegeTransferNode(30),
    /**
     * <code>PrivilegeTransferReplica = 31;</code>
     */
    PrivilegeTransferReplica(31),
    /**
     * <code>PrivilegeGetLoadingProgress = 32;</code>
     */
    PrivilegeGetLoadingProgress(32),
    /**
     * <code>PrivilegeGetLoadState = 33;</code>
     */
    PrivilegeGetLoadState(33),
    /**
     * <code>PrivilegeRenameCollection = 34;</code>
     */
    PrivilegeRenameCollection(34),
    /**
     * <code>PrivilegeCreateDatabase = 35;</code>
     */
    PrivilegeCreateDatabase(35),
    /**
     * <code>PrivilegeDropDatabase = 36;</code>
     */
    PrivilegeDropDatabase(36),
    /**
     * <code>PrivilegeListDatabases = 37;</code>
     */
    PrivilegeListDatabases(37),
    /**
     * <code>PrivilegeFlushAll = 38;</code>
     */
    PrivilegeFlushAll(38),
    UNRECOGNIZED(-1);

    /**
     * <code>PrivilegeAll = 0;</code>
     */
    public static final int PrivilegeAll_VALUE = 0;

    /**
     * <code>PrivilegeCreateCollection = 1;</code>
     */
    public static final int PrivilegeCreateCollection_VALUE = 1;

    /**
     * <code>PrivilegeDropCollection = 2;</code>
     */
    public static final int PrivilegeDropCollection_VALUE = 2;

    /**
     * <code>PrivilegeDescribeCollection = 3;</code>
     */
    public static final int PrivilegeDescribeCollection_VALUE = 3;

    /**
     * <code>PrivilegeShowCollections = 4;</code>
     */
    public static final int PrivilegeShowCollections_VALUE = 4;

    /**
     * <code>PrivilegeLoad = 5;</code>
     */
    public static final int PrivilegeLoad_VALUE = 5;

    /**
     * <code>PrivilegeRelease = 6;</code>
     */
    public static final int PrivilegeRelease_VALUE = 6;

    /**
     * <code>PrivilegeCompaction = 7;</code>
     */
    public static final int PrivilegeCompaction_VALUE = 7;

    /**
     * <code>PrivilegeInsert = 8;</code>
     */
    public static final int PrivilegeInsert_VALUE = 8;

    /**
     * <code>PrivilegeDelete = 9;</code>
     */
    public static final int PrivilegeDelete_VALUE = 9;

    /**
     * <code>PrivilegeGetStatistics = 10;</code>
     */
    public static final int PrivilegeGetStatistics_VALUE = 10;

    /**
     * <code>PrivilegeCreateIndex = 11;</code>
     */
    public static final int PrivilegeCreateIndex_VALUE = 11;

    /**
     * <code>PrivilegeIndexDetail = 12;</code>
     */
    public static final int PrivilegeIndexDetail_VALUE = 12;

    /**
     * <code>PrivilegeDropIndex = 13;</code>
     */
    public static final int PrivilegeDropIndex_VALUE = 13;

    /**
     * <code>PrivilegeSearch = 14;</code>
     */
    public static final int PrivilegeSearch_VALUE = 14;

    /**
     * <code>PrivilegeFlush = 15;</code>
     */
    public static final int PrivilegeFlush_VALUE = 15;

    /**
     * <code>PrivilegeQuery = 16;</code>
     */
    public static final int PrivilegeQuery_VALUE = 16;

    /**
     * <code>PrivilegeLoadBalance = 17;</code>
     */
    public static final int PrivilegeLoadBalance_VALUE = 17;

    /**
     * <code>PrivilegeImport = 18;</code>
     */
    public static final int PrivilegeImport_VALUE = 18;

    /**
     * <code>PrivilegeCreateOwnership = 19;</code>
     */
    public static final int PrivilegeCreateOwnership_VALUE = 19;

    /**
     * <code>PrivilegeUpdateUser = 20;</code>
     */
    public static final int PrivilegeUpdateUser_VALUE = 20;

    /**
     * <code>PrivilegeDropOwnership = 21;</code>
     */
    public static final int PrivilegeDropOwnership_VALUE = 21;

    /**
     * <code>PrivilegeSelectOwnership = 22;</code>
     */
    public static final int PrivilegeSelectOwnership_VALUE = 22;

    /**
     * <code>PrivilegeManageOwnership = 23;</code>
     */
    public static final int PrivilegeManageOwnership_VALUE = 23;

    /**
     * <code>PrivilegeSelectUser = 24;</code>
     */
    public static final int PrivilegeSelectUser_VALUE = 24;

    /**
     * <code>PrivilegeUpsert = 25;</code>
     */
    public static final int PrivilegeUpsert_VALUE = 25;

    /**
     * <code>PrivilegeCreateResourceGroup = 26;</code>
     */
    public static final int PrivilegeCreateResourceGroup_VALUE = 26;

    /**
     * <code>PrivilegeDropResourceGroup = 27;</code>
     */
    public static final int PrivilegeDropResourceGroup_VALUE = 27;

    /**
     * <code>PrivilegeDescribeResourceGroup = 28;</code>
     */
    public static final int PrivilegeDescribeResourceGroup_VALUE = 28;

    /**
     * <code>PrivilegeListResourceGroups = 29;</code>
     */
    public static final int PrivilegeListResourceGroups_VALUE = 29;

    /**
     * <code>PrivilegeTransferNode = 30;</code>
     */
    public static final int PrivilegeTransferNode_VALUE = 30;

    /**
     * <code>PrivilegeTransferReplica = 31;</code>
     */
    public static final int PrivilegeTransferReplica_VALUE = 31;

    /**
     * <code>PrivilegeGetLoadingProgress = 32;</code>
     */
    public static final int PrivilegeGetLoadingProgress_VALUE = 32;

    /**
     * <code>PrivilegeGetLoadState = 33;</code>
     */
    public static final int PrivilegeGetLoadState_VALUE = 33;

    /**
     * <code>PrivilegeRenameCollection = 34;</code>
     */
    public static final int PrivilegeRenameCollection_VALUE = 34;

    /**
     * <code>PrivilegeCreateDatabase = 35;</code>
     */
    public static final int PrivilegeCreateDatabase_VALUE = 35;

    /**
     * <code>PrivilegeDropDatabase = 36;</code>
     */
    public static final int PrivilegeDropDatabase_VALUE = 36;

    /**
     * <code>PrivilegeListDatabases = 37;</code>
     */
    public static final int PrivilegeListDatabases_VALUE = 37;

    /**
     * <code>PrivilegeFlushAll = 38;</code>
     */
    public static final int PrivilegeFlushAll_VALUE = 38;

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ObjectPrivilege valueOf(int value) {
        return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ObjectPrivilege forNumber(int value) {
        switch (value) {
            case 0:
                return PrivilegeAll;
            case 1:
                return PrivilegeCreateCollection;
            case 2:
                return PrivilegeDropCollection;
            case 3:
                return PrivilegeDescribeCollection;
            case 4:
                return PrivilegeShowCollections;
            case 5:
                return PrivilegeLoad;
            case 6:
                return PrivilegeRelease;
            case 7:
                return PrivilegeCompaction;
            case 8:
                return PrivilegeInsert;
            case 9:
                return PrivilegeDelete;
            case 10:
                return PrivilegeGetStatistics;
            case 11:
                return PrivilegeCreateIndex;
            case 12:
                return PrivilegeIndexDetail;
            case 13:
                return PrivilegeDropIndex;
            case 14:
                return PrivilegeSearch;
            case 15:
                return PrivilegeFlush;
            case 16:
                return PrivilegeQuery;
            case 17:
                return PrivilegeLoadBalance;
            case 18:
                return PrivilegeImport;
            case 19:
                return PrivilegeCreateOwnership;
            case 20:
                return PrivilegeUpdateUser;
            case 21:
                return PrivilegeDropOwnership;
            case 22:
                return PrivilegeSelectOwnership;
            case 23:
                return PrivilegeManageOwnership;
            case 24:
                return PrivilegeSelectUser;
            case 25:
                return PrivilegeUpsert;
            case 26:
                return PrivilegeCreateResourceGroup;
            case 27:
                return PrivilegeDropResourceGroup;
            case 28:
                return PrivilegeDescribeResourceGroup;
            case 29:
                return PrivilegeListResourceGroups;
            case 30:
                return PrivilegeTransferNode;
            case 31:
                return PrivilegeTransferReplica;
            case 32:
                return PrivilegeGetLoadingProgress;
            case 33:
                return PrivilegeGetLoadState;
            case 34:
                return PrivilegeRenameCollection;
            case 35:
                return PrivilegeCreateDatabase;
            case 36:
                return PrivilegeDropDatabase;
            case 37:
                return PrivilegeListDatabases;
            case 38:
                return PrivilegeFlushAll;
            default:
                return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ObjectPrivilege> internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ObjectPrivilege> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<ObjectPrivilege>() {

        public ObjectPrivilege findValueByNumber(int number) {
            return ObjectPrivilege.forNumber(number);
        }
    };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return io.milvus.grpc.CommonProto.getDescriptor().getEnumTypes().get(10);
    }

    private static final ObjectPrivilege[] VALUES = values();

    public static ObjectPrivilege valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private ObjectPrivilege(int value) {
        this.value = value;
    }
}
