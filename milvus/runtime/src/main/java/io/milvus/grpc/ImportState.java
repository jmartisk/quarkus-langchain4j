// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
package io.milvus.grpc;

/**
 * Protobuf enum {@code milvus.proto.common.ImportState}
 */
public enum ImportState implements com.google.protobuf.ProtocolMessageEnum {

    /**
     * <pre>
     * the task in in pending list of rootCoord, waiting to be executed
     * </pre>
     *
     * <code>ImportPending = 0;</code>
     */
    ImportPending(0),
    /**
     * <pre>
     * the task failed for some reason, get detail reason from GetImportStateResponse.infos
     * </pre>
     *
     * <code>ImportFailed = 1;</code>
     */
    ImportFailed(1),
    /**
     * <pre>
     * the task has been sent to datanode to execute
     * </pre>
     *
     * <code>ImportStarted = 2;</code>
     */
    ImportStarted(2),
    /**
     * <pre>
     * all data files have been parsed and all meta data already persisted, ready to be flushed.
     * </pre>
     *
     * <code>ImportPersisted = 5;</code>
     */
    ImportPersisted(5),
    /**
     * <pre>
     * all segments are successfully flushed.
     * </pre>
     *
     * <code>ImportFlushed = 8;</code>
     */
    ImportFlushed(8),
    /**
     * <pre>
     * all indexes are successfully built and segments are able to be compacted as normal.
     * </pre>
     *
     * <code>ImportCompleted = 6;</code>
     */
    ImportCompleted(6),
    /**
     * <pre>
     * the task failed and all segments it generated are cleaned up.
     * </pre>
     *
     * <code>ImportFailedAndCleaned = 7;</code>
     */
    ImportFailedAndCleaned(7),
    UNRECOGNIZED(-1);

    /**
     * <pre>
     * the task in in pending list of rootCoord, waiting to be executed
     * </pre>
     *
     * <code>ImportPending = 0;</code>
     */
    public static final int ImportPending_VALUE = 0;

    /**
     * <pre>
     * the task failed for some reason, get detail reason from GetImportStateResponse.infos
     * </pre>
     *
     * <code>ImportFailed = 1;</code>
     */
    public static final int ImportFailed_VALUE = 1;

    /**
     * <pre>
     * the task has been sent to datanode to execute
     * </pre>
     *
     * <code>ImportStarted = 2;</code>
     */
    public static final int ImportStarted_VALUE = 2;

    /**
     * <pre>
     * all data files have been parsed and all meta data already persisted, ready to be flushed.
     * </pre>
     *
     * <code>ImportPersisted = 5;</code>
     */
    public static final int ImportPersisted_VALUE = 5;

    /**
     * <pre>
     * all segments are successfully flushed.
     * </pre>
     *
     * <code>ImportFlushed = 8;</code>
     */
    public static final int ImportFlushed_VALUE = 8;

    /**
     * <pre>
     * all indexes are successfully built and segments are able to be compacted as normal.
     * </pre>
     *
     * <code>ImportCompleted = 6;</code>
     */
    public static final int ImportCompleted_VALUE = 6;

    /**
     * <pre>
     * the task failed and all segments it generated are cleaned up.
     * </pre>
     *
     * <code>ImportFailedAndCleaned = 7;</code>
     */
    public static final int ImportFailedAndCleaned_VALUE = 7;

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ImportState valueOf(int value) {
        return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ImportState forNumber(int value) {
        switch (value) {
            case 0:
                return ImportPending;
            case 1:
                return ImportFailed;
            case 2:
                return ImportStarted;
            case 5:
                return ImportPersisted;
            case 8:
                return ImportFlushed;
            case 6:
                return ImportCompleted;
            case 7:
                return ImportFailedAndCleaned;
            default:
                return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ImportState> internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<ImportState> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<ImportState>() {

        public ImportState findValueByNumber(int number) {
            return ImportState.forNumber(number);
        }
    };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
        return io.milvus.grpc.CommonProto.getDescriptor().getEnumTypes().get(8);
    }

    private static final ImportState[] VALUES = values();

    public static ImportState valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private ImportState(int value) {
        this.value = value;
    }
}
