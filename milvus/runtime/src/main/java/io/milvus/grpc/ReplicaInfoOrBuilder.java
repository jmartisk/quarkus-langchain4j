// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto
package io.milvus.grpc;

public interface ReplicaInfoOrBuilder extends // @@protoc_insertion_point(interface_extends:milvus.proto.milvus.ReplicaInfo)
        com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 replicaID = 1;</code>
     *
     * @return The replicaID.
     */
    long getReplicaID();

    /**
     * <code>int64 collectionID = 2;</code>
     *
     * @return The collectionID.
     */
    long getCollectionID();

    /**
     * <pre>
     * empty indicates to load collection
     * </pre>
     *
     * <code>repeated int64 partition_ids = 3;</code>
     *
     * @return A list containing the partitionIds.
     */
    java.util.List<java.lang.Long> getPartitionIdsList();

    /**
     * <pre>
     * empty indicates to load collection
     * </pre>
     *
     * <code>repeated int64 partition_ids = 3;</code>
     *
     * @return The count of partitionIds.
     */
    int getPartitionIdsCount();

    /**
     * <pre>
     * empty indicates to load collection
     * </pre>
     *
     * <code>repeated int64 partition_ids = 3;</code>
     *
     * @param index The index of the element to return.
     * @return The partitionIds at the given index.
     */
    long getPartitionIds(int index);

    /**
     * <code>repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;</code>
     */
    java.util.List<io.milvus.grpc.ShardReplica> getShardReplicasList();

    /**
     * <code>repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;</code>
     */
    io.milvus.grpc.ShardReplica getShardReplicas(int index);

    /**
     * <code>repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;</code>
     */
    int getShardReplicasCount();

    /**
     * <code>repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;</code>
     */
    java.util.List<? extends io.milvus.grpc.ShardReplicaOrBuilder> getShardReplicasOrBuilderList();

    /**
     * <code>repeated .milvus.proto.milvus.ShardReplica shard_replicas = 4;</code>
     */
    io.milvus.grpc.ShardReplicaOrBuilder getShardReplicasOrBuilder(int index);

    /**
     * <pre>
     * include leaders
     * </pre>
     *
     * <code>repeated int64 node_ids = 5;</code>
     *
     * @return A list containing the nodeIds.
     */
    java.util.List<java.lang.Long> getNodeIdsList();

    /**
     * <pre>
     * include leaders
     * </pre>
     *
     * <code>repeated int64 node_ids = 5;</code>
     *
     * @return The count of nodeIds.
     */
    int getNodeIdsCount();

    /**
     * <pre>
     * include leaders
     * </pre>
     *
     * <code>repeated int64 node_ids = 5;</code>
     *
     * @param index The index of the element to return.
     * @return The nodeIds at the given index.
     */
    long getNodeIds(int index);

    /**
     * <code>string resource_group_name = 6;</code>
     *
     * @return The resourceGroupName.
     */
    java.lang.String getResourceGroupName();

    /**
     * <code>string resource_group_name = 6;</code>
     *
     * @return The bytes for resourceGroupName.
     */
    com.google.protobuf.ByteString getResourceGroupNameBytes();

    /**
     * <pre>
     * outbound access rg -&gt; node num
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_outbound_node = 7;</code>
     */
    int getNumOutboundNodeCount();

    /**
     * <pre>
     * outbound access rg -&gt; node num
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_outbound_node = 7;</code>
     */
    boolean containsNumOutboundNode(java.lang.String key);

    /**
     * Use {@link #getNumOutboundNodeMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer> getNumOutboundNode();

    /**
     * <pre>
     * outbound access rg -&gt; node num
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_outbound_node = 7;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer> getNumOutboundNodeMap();

    /**
     * <pre>
     * outbound access rg -&gt; node num
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_outbound_node = 7;</code>
     */
    int getNumOutboundNodeOrDefault(java.lang.String key, int defaultValue);

    /**
     * <pre>
     * outbound access rg -&gt; node num
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_outbound_node = 7;</code>
     */
    int getNumOutboundNodeOrThrow(java.lang.String key);
}
